{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReverseSate","isReset","goods","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGHT","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAqCH,oBAAS,GAA9C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAAUF,GAAcF,IAAaL,EAASI,KAE9CM,EA7BD,SACLA,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAITX,GACFI,EAAaQ,UAGRR,EAQOS,CAAkBnB,EAAiB,CAAEI,WAAUE,eAO7D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYlB,IAAaL,EAASe,WAEtCS,QAAS,kBAAMlB,EAAYN,EAASe,WANtC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAaL,EAASiB,SAEtCO,QAAS,kBAAMlB,EAAYN,EAASiB,SANtC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAgBD,IALjC,qBAUCE,GAEC,wBACEa,KAAK,SACLD,UAAWE,IACT,mBACA,CAAE,WAAYlB,IAAaL,EAASI,OAASG,IAE/CiB,QAhDU,WAClBlB,EAAYN,EAASI,MACrBI,GAAe,IAwCT,sBAcJ,6BACGE,EAAMe,KAAI,SAAAC,GAAI,OACb,6BAAgBA,GAAPA,YCnHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2677911f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGHT,\n}\n\ntype RearderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: RearderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n      case SortType.LENGHT:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverseSate] = useState(false);\n  const isReset = isReversed || sortType !== SortType.NONE;\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setReverseSate(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGHT },\n          )}\n          onClick={() => setSortType(SortType.LENGHT)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setReverseSate(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isReset\n        && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-danger',\n              { 'is-light': sortType === SortType.NONE && !isReversed },\n            )}\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}